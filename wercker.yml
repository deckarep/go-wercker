# References this wercker: https://github.com/RomanTsegelskyi/smsummarizer/blob/master/wercker.yml

#
# 
# This references the default golang container from
# the Docker Hub: https://registry.hub.docker.com/u/library/golang/
# If you want Google's container you would reference google/golang
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: golang
# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html

# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongo
    # http://devcenter.wercker.com/docs/services/mongodb.html
build:
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    # Sets the go workspace and places you package
    # at the right place in the workspace tree
    - setup-go-workspace

    # Gets the dependencies
    - script:
        name: go get
        code: |
          go version
          go get

    # vet the project
    - script:
        name: go vet
        code: |
          go vet ./...
   
    # Build the project
    - script:
        name: go build
        code: |
          go build ./...
          echo "Listing out all files..."
          ls -lah 

    # Test the project
    - script:
        name: go test
        code: |
     
     # Copy binary to output path
    - script:
        name: copy binary
        code: cp go-wercker "$WERCKER_OUTPUT_DIR"

deploy:
  steps:
    # push to https://hub.docker.com/r/deckarep/go-wercker/ or any docker registry of your choosing
    - internal/docker-scratch-push:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        repository: deckarep/go-wercker 
        ports: "8080"
        cmd: ./go-wercker # name is based on the the `go build` command which will use dir name
    - add-ssh-key:
        keyname: DIGITAL_OCEAN # add as the key name in wercker pipeline setup (not env variable, but ssh key)
    - add-to-known_hosts:
        hostname: $DIGITAL_OCEAN_IP # add as environment variable (get from DigitalOcean control panel)
    - script:
        name: pull latest image
        code: ssh root@$DIGITAL_OCEAN_IP docker pull deckarep/go-wercker:latest
    - script:
        name: stop running container
        code: ssh root@$DIGITAL_OCEAN_IP docker stop go-wercker || echo ‘failed to stop running container’
    - script:
        name: remove stopped container
        code: ssh root@$DIGITAL_OCEAN_IP docker rm go-wercker || echo ‘failed to remove stopped container’
    - script:
        name: remove image behind stopped container
        code: ssh root@$DIGITAL_OCEAN_IP docker rmi deckarep/go-wercker:current || echo ‘failed to remove image behind stopped container’
    - script:
        name: tag newly pulled image
        code: ssh root@$DIGITAL_OCEAN_IP docker tag deckarep/go-wercker:latest deckarep/go-wercker:current
    - script:
        name: run new container
        code: ssh root@$DIGITAL_OCEAN_IP docker run -d -p 80:5000 --name go-wercker deckarep/go-wercker:current
# END
